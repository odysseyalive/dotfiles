#!/usr/bin/env bash

# yadrlite
# Optimized Dotfiles
# # # # # # # # # # # # # # #

# # Options
# # # # # # # # # # # # # # #
USEREPO=yes
dir=~/.yadrlite
dotfiles_old=backup
action="${1:-install}"
declare -a files=('vim vimrc tmux.conf profile bash_profile bashrc vimrc.after emacs emacs.d')
declare -a config=('kitty nvim ranger')
declare -a tmuxplugins=('https://github.com/tmux-plugins/tmux-resurrect.git' 'https://github.com/tmux-plugins/tmux-sensible')

# # Routines
# # # # # # # # # # # # # # #
function installed {
  local inststatus=yes
  if [[ $($1 2>&1) =~ (not found) ]]; then
    local inststatus=no
  fi
  echo "$inststatus"
}

function update {
  local dirs=$1
  cd $dirs
  local plugindirs=(*/)
  for pdir in "${plugindirs[@]}"; do
    cd $dirs/$pdir
    echo "Updating $pdir..."
    if [ -d ".git" ]; then
      git pull --rebase
    fi
  done
}

# # Remove
# # # # # # # # # # # # # # #
if [ "$action" == "remove" ]; then
  echo "# # Removing Dotfiles and Restoring Settings"
  echo "# # # # # # # # # # # # # # # # # # # # # #"
  for cfile in ${files[@]}; do
    rm -rf ~/.$cfile 2>/dev/null
    mv $dir/$dotfiles_old/.$cfile ~/ 2>/dev/null
  done
  for cfile in ${config[@]}; do
    rm -rf ~/.config/$cfile 2>/dev/null
    mv $dir/$dotfiles_old/config/$cfile ~/.config/$cfile 2>/dev/null
  done
  rm -rf $dir 2>/dev/null

  echo ""
  echo "Your original dotfiles have been restored.  Please restart"
  echo "the terminal or re-login to supress error messages."
  echo ""
fi

# # Update
# # # # # # # # # # # # # # #
if [ "$action" == "update" ]; then
  echo "# # Updating Dotfiles"
  echo "# # # # # # # # # # # # # # # # # # # # # #"
  if [ ! -f $dir/setup ]; then
    action=install
  else
    cd $dir
    git pull --rebase
    update $dir/tmux/plugin
    echo "The update is finished."
  fi
fi

# nvm install v18.20.4
# # # # # # # # # # # # # # #
if [ "$action" == "tools" ]; then
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
  sleep 5
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
  nvm install v22.20.0
  sleep 5
  nvm alias default 22.20.0
  nvm use 22.20.0
  npm install --location=global --save-dev grunt-cli gulp gulp-cli csslint typescript@3.0 typescript-language-server intelephense yaml-lint eslint-plugin-toml eslint-plugin-markdown golangci-lint vscode-css-languageserver-bin js-beautify unified-language-server eslint emmet-ls babel-eslint typescript-lsp coffeescript coffeelint neovim
  # go lang
  curl -sSL https://git.io/g-install | bash
  sleep 5
  export GOROOT="$HOME/.go"
  export PATH="$GOROOT/bin:$PATH"
  export GOPATH="$HOME/go"
  export PATH="$GOPATH/bin:$PATH"
  g install latest
  go install github.com/junegunn/fzf@latest
  go install github.com/jesseduffield/lazygit@latest
  go install github.com/gitleaks/gitleaks/v8@latest
  go install github.com/charmbracelet/glow@latest

  # Install config files (kitty, nvim, ranger)
  echo "# # Installing config files (kitty, nvim, ranger)"
  echo "# # # # # # # # # # # # # # # # # # # # # # # # #"
  mkdir -p ~/.config
  mkdir -p $dir/backup/config 2>/dev/null
  for cfile in ${config[@]}; do
    # Backup existing config
    mv ~/.config/$cfile $dir/backup/config/$cfile 2>/dev/null
    # Copy new config
    cp -r $dir/workstation/$cfile ~/.config/$cfile
  done
  find ~/.config -type d -exec chmod 0755 {} \;
  find ~/.config -type f -exec chmod 0644 {} \;
  find ~/.config -name "*.sh" -execdir chmod u+x {} +
fi

# nvm install v18.20.4
# # # # # # # # # # # # # # #
if [ "$action" == "omarchy" ]; then
  mise install node@22.20.0
  mise use -g node@22.20.0
  npm install --location=global --save-dev grunt-cli gulp gulp-cli csslint typescript@3.0 typescript-language-server intelephense yaml-lint eslint-plugin-toml eslint-plugin-markdown golangci-lint vscode-css-languageserver-bin js-beautify unified-language-server eslint emmet-ls babel-eslint typescript-lsp coffeescript coffeelint neovim

  # go lang
  curl -sSL https://git.io/g-install | bash
  sleep 5
  export GOROOT="$HOME/.go"
  export PATH="$GOROOT/bin:$PATH"
  export GOPATH="$HOME/go"
  export PATH="$GOPATH/bin:$PATH"
  g install latest
  go install github.com/junegunn/fzf@latest
  go install github.com/jesseduffield/lazygit@latest
  go install github.com/gitleaks/gitleaks/v8@latest
  go install github.com/charmbracelet/glow@latest

  # Configure Kitty to use Omarchy theme system
  echo "# # Configuring Kitty for Omarchy theme switching"
  mkdir -p ~/.config/kitty
  cat >~/.config/kitty/kitty.conf <<'EOF'
# Omarchy theme integration - automatically updates when you switch themes
include ~/.config/omarchy/current/theme/kitty.conf

# Add your personal Kitty settings below this line
# (fonts, keybindings, window settings, etc.)
EOF

  # Add custom plugins and settings to existing Omarchy Neovim setup
  echo "# # Adding custom plugins to Neovim (PHP, Copilot, org-mode, etc.)"
  mkdir -p ~/.config/nvim/lua/plugins
  mkdir -p ~/.config/nvim/lua/config

  # Copy specific custom plugin files (preserves stock omarchy plugins)
  declare -a custom_plugins=('coffeescript.lua' 'conform.lua' 'copilot-chat.lua' 'git.lua' 'mason.lua' 'nvim-dap.lua' 'org-mode.lua' 'performance.lua' 'php.lua' 'telescope.lua' 'vim-table-mode.lua')
  for plugin in "${custom_plugins[@]}"; do
    cp $dir/workstation/nvim/lua/plugins/$plugin ~/.config/nvim/lua/plugins/
  done

  # Update config files with custom settings
  cp $dir/workstation/nvim/lua/config/options.lua ~/.config/nvim/lua/config/options.lua
  cp $dir/workstation/nvim/lua/config/lazy.lua ~/.config/nvim/lua/config/lazy.lua

  # Configure uwsm to use Kitty as default terminal
  echo "# # Configuring uwsm to use Kitty as default terminal"
  if [ -f ~/.config/uwsm/default ]; then
    sed -i 's/^export TERMINAL=.*/export TERMINAL=kitty/' ~/.config/uwsm/default
    echo "Updated TERMINAL export in ~/.config/uwsm/default"
  else
    echo "Warning: ~/.config/uwsm/default not found, skipping terminal configuration"
  fi

  echo "Kitty and Neovim configured for Omarchy theme switching"
fi

# # Install
# # # # # # # # # # # # # # #
if [ "$action" == "install" ]; then
  echo "# # Installing Dotfiles"
  echo "# # # # # # # # # # # # # # # # # # # # # #"
  if [ -f $dir/setup ]; then
    echo ""
    echo "YADRLite is already installed."
    exit
  fi

  if ! [ -x "$(command -v git)" ]; then
    echo ""
    echo "'Git' doesn't seem to be installed.  Install it. :)"
    exit
  fi
  if [ "$USEREPO" == "yes" ]; then
    git clone https://github.com/odysseyalive/dotfiles.git $dir
  else
    if [ ! -f setup ]; then
      git clone https://github.com/odysseyalive/dotfiles.git $dir
    else
      cp -R . $dir
    fi
  fi

  echo "# # Backing up current configurations"
  echo "# # # # # # # # # # # # # # # # # # # # # #"
  cd $dir
  cat ~/.bashrc >$dir/bashrc 2>/dev/null
  cat ~/.bash_profile >$dir/bash_profile 2>/dev/null
  mkdir -p $dotfiles_old 2>/dev/null
  for cfile in ${files[@]}; do
    mv ~/.$cfile $dir/$dotfiles_old/ 2>/dev/null
  done

  echo "# # Vim, Emacs and Tmux Configurations"
  echo "# # # # # # # # # # # # # # # # # # # # # #"
  cat $dir/vim/vimrc >>$dir/vimrc 2>/dev/null
  cat $dir/vim/vimrc.after >>$dir/vimrc.after 2>/dev/null
  cp $dir/emacs.d/emacs.init $dir/emacs
  mkdir -p $dir/emacs.d/.extension
  unzip $dir/workstation/extension/xdebug-vscode-plugin.zip -d $dir/emacs.d/.extension
  sed -i "s@multi-term-program.*@multi-term-program \"$(which bash)\")@" $dir/emacs 2>/dev/null
  cat $dir/tmux/tmux.conf >$dir/tmux.conf
  echo "set-option -g default-shell \$SHELL" >>$dir/tmux.conf
  if [[ "$(uname)" == "Linux" || "$(uname)" == "FreeBSD" ]]; then
    echo "Gnu/Linux detected..."
    echo '# tmux status options' >>$dir/tmux.conf
    echo "run-shell $dir/tmux/airline-hybrid-patched.tmux" >>$dir/tmux.conf
  else
    rm -rf $dir
    echo "Please look into Linux. Your OS isn't supported yet."
    exit
  fi

  echo "# # Loading plugins"
  echo "# # # # # # # # # # # # # # # # # # # # # #"
  mkdir $dir/tmux/plugin 2>/dev/null
  mkdir -p ~/.tmux/plugins 2>/dev/null
  cd $dir/tmux/plugin
  for tplug in "${tmuxplugins[@]}"; do
    echo "git clone $tplug"
    git clone $tplug
  done

  # covers injection into most existing configurations
  if ! grep -q "~/.bashrc" $dir/bash_profile && ! grep -q "~/.bash_profile" $dir/bashrc; then
    cat $dir/bash/bashrc >>$dir/bashrc 2>/dev/null
    echo "source ~/.bashrc" >>$dir/bash_profile 2>/dev/null
  elif ! grep -q "~/.bashrc" $dir/bash_profile; then
    cat $dir/bash/bashrc >>$dir/bash_profile 2>/dev/null
  else
    cat $dir/bash/bashrc >>$dir/bashrc 2>/dev/null
  fi

  # fixes sourcing of bashrc within tmux
  sed -i "s@.*\..*/etc/bashrc@    source /etc/bashrc@g" $dir/bashrc
  sed -i "s@.*\..*~\.bashrc@    source ~/.bashrc@g" $dir/bash_profile

  echo "# # Building Symbolic Links"
  echo "# # # # # # # # # # # # # # # # # # # # # #"
  cd $dir
  mkdir -p $dotfiles_old 2>/dev/null
  for cfile in ${files[@]}; do
    ln -s $dir/$cfile ~/.$cfile
  done

  echo ""
  echo "This script does not install ack, emacs, silversearcher, tmux or"
  echo "Vim with Lua support. That's something you might look into."
  echo ""
  echo "The dotfiles are installed. Restart the terminal or re-login to"
  echo "remote deployment to see changes."
  echo ""
fi
